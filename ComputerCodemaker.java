/**
 * The ComputerCodemaker class deals with the computer generated codes, it also contains methods for generating a random number
 * which is used in other areas of the program where there is not necessarily a code being generated. 
 * @author liamberrisford
 * @release 05/01/2016
 *
 */
public class ComputerCodemaker {
	private String generatedCode;
	private int coloursInPlay;
	private int codeLength;
	
	/**
	 * Constructor that is used to randomly populate the colours that will be in the code. Once the amount of colours have been decided then the code length will be 
	 * decided using the colours in play as the upper limit. 
	 */
	public ComputerCodemaker() {
		coloursInPlay = randomValueInRange(3,8);
		codeLength = randomValueInRange(3, coloursInPlay);
	}
	
	/**
	 * A method that is used for the generating the code that will be either cracked by either the computer code breaker or a human code breaker.
	 */
	public void generateCode() {
		//Tells the user how many colours could be in the code, and how long the code.
		System.out.println("Colours in play " + coloursInPlay + " ,the code length is " + codeLength + ".");
		
		//Calculates which colours the computer can choose from given the amount of colours the code can be made up of. 
		String unusedColours = "RGBYOPCM".substring(0, coloursInPlay);
		
		//Char array that will be used to store each of the choosen cours for the code before it is changed to a string. 
		char[] currentCode = new char[codeLength];
		
		//This will mvoe through the char array and populate it with a code. 
		for(int i = 0; i < codeLength; i++) {
			
			//Randomly chooses a char (colours) from the unused colours stirng to put into the char array for the code. 
			char codeInput = unusedColours.charAt(randomValueInRange(0,(unusedColours.length() - 1)));
			currentCode[i] = codeInput;
			
			//Once a colour has been choosen it is removed from the string so that there are no repeat colours in the code. 
			unusedColours = unusedColours.replace("" + codeInput, "");
		}
		
		//The char array is then turned into a string that is then assigned to a filed that can then be put into the settings using an accessor within the game mode class..
		String code = new String(currentCode);
		generatedCode = code;
	}
	
	/**
	 * Method that is used to calculate a random integer value between two integers, min and max.
	 * @param min - This is the minimum integer that the random value can take.
	 * @param max - This is the maximum integer that the random value can take.
	 * @return - This will return the random integer that has been calculated. 
	 */
	public int randomValueInRange(int min, int max) {
		int value = min + (int)(Math.random() * ((max - min) + 1));
		return value;
	}
	
	// Accessor. @return - The colours in play for the current game. 
	public int getColoursInPlay() {
		return coloursInPlay;
	}
	
	// Accessor. @return - The code that has been generated by the computer.
	public String getGeneratedCode() {
		return generatedCode;
	}
	
	// Accessor. @return - The length of the code that has been decided upon by the computer. 
	public int getCodeLength() {
		return codeLength;
	}
}
